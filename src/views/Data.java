/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import Config.UserSession;
import Config.constant;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Calendar;
import java.util.Locale;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;

/**
 *
 * @author FryenX
 */
public class Data extends javax.swing.JFrame {

    /**
     * Creates new form Data
     */
    public Data() {
        initComponents(); // This should already create your combo boxes from the form
        customizeTable();
        Icon();
        txtSession.setText(UserSession.getName());
        // Populate the combo boxes
        populateYearComboBox();
        populateMonthComboBox();

        // Set the combo boxes to show current year and month
        comboYear.setSelectedItem(String.valueOf(selectedYear));
        comboMonth.setSelectedItem(selectedMonth);

        // Add action listeners
        comboYear.addActionListener(e -> onYearChanged(e));
        comboMonth.addActionListener(e -> onMonthChanged(e));

        // Now fetch transactions
        String searchQuery = txtSearch.getText().trim();
        fetchTransactions(searchQuery, currentPage, selectedYear, selectedMonth);
    }

    private final Connection conn = (Connection) constant.connect();
    private int currentPage = 0;
    private int totalPages = 0;
    private final int pageSize = 10;
    private int selectedYear = Calendar.getInstance().get(Calendar.YEAR); // Current year
    private String selectedMonth = String.format("%02d", Calendar.getInstance().get(Calendar.MONTH) + 1); // Current month (01 to 12)
    private void Icon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/image/icon.png")));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel13 = new javax.swing.JPanel();
        btnHome11 = new javax.swing.JLabel();
        iconHome11 = new javax.swing.JLabel();
        jSeparator12 = new javax.swing.JSeparator();
        menuData11 = new javax.swing.JLabel();
        iconData11 = new javax.swing.JLabel();
        iconInput11 = new javax.swing.JLabel();
        menuInput11 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtSession = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        labelCategories = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        comboYear = new javax.swing.JComboBox<>();
        comboMonth = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTransactions = new javax.swing.JTable();
        btnPrint = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        pageButtonPanel = new javax.swing.JPanel();
        btnNext = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel13.setBackground(new java.awt.Color(102, 102, 102));

        btnHome11.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnHome11.setForeground(new java.awt.Color(255, 255, 255));
        btnHome11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnHome11.setText("Home");
        btnHome11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHome11MouseClicked(evt);
            }
        });

        iconHome11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/chart-simple-solid.png"))); // NOI18N

        jSeparator12.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator12.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator12.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        menuData11.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        menuData11.setForeground(new java.awt.Color(255, 255, 255));
        menuData11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        menuData11.setText("Data");
        menuData11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuData11MouseClicked(evt);
            }
        });

        iconData11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/table-solid.png"))); // NOI18N

        iconInput11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/table-solid.png"))); // NOI18N

        menuInput11.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        menuInput11.setForeground(new java.awt.Color(255, 255, 255));
        menuInput11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        menuInput11.setText("Input");
        menuInput11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuInput11MouseClicked(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setMinimumSize(new java.awt.Dimension(194, 100));

        txtSession.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        txtSession.setText("NAME");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(txtSession)
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSession)
                .addContainerGap())
        );

        btnLogout.setBackground(new java.awt.Color(255, 0, 0));
        btnLogout.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(255, 255, 255));
        btnLogout.setText("LOGOUT");
        btnLogout.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addComponent(iconData11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(menuData11, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addComponent(iconInput11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(menuInput11, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addComponent(iconHome11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHome11))))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(iconHome11)
                    .addComponent(btnHome11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iconInput11)
                    .addComponent(menuInput11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iconData11)
                    .addComponent(menuData11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 462, Short.MAX_VALUE)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        labelCategories.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        labelCategories.setText("Data");

        jLabel2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel2.setText("Search:");

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        tableTransactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Invoice", "Date Time", "Customer", "Disc (%)", "Disc (IDR)", "Gross Total", "Net Total", "Payment", "Change"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableTransactions);
        if (tableTransactions.getColumnModel().getColumnCount() > 0) {
            tableTransactions.getColumnModel().getColumn(0).setMinWidth(40);
            tableTransactions.getColumnModel().getColumn(0).setPreferredWidth(40);
            tableTransactions.getColumnModel().getColumn(0).setMaxWidth(40);
            tableTransactions.getColumnModel().getColumn(1).setMinWidth(140);
            tableTransactions.getColumnModel().getColumn(1).setPreferredWidth(140);
            tableTransactions.getColumnModel().getColumn(1).setMaxWidth(140);
        }

        btnPrint.setBackground(new java.awt.Color(0, 102, 204));
        btnPrint.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnPrint.setForeground(new java.awt.Color(255, 255, 255));
        btnPrint.setText("Print CSV");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnPrev.setBackground(new java.awt.Color(102, 102, 102));
        btnPrev.setFont(new java.awt.Font("Poppins Black", 1, 14)); // NOI18N
        btnPrev.setForeground(new java.awt.Color(255, 255, 255));
        btnPrev.setText("<<");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        pageButtonPanel.setAlignmentX(0.0F);
        pageButtonPanel.setAlignmentY(0.0F);

        javax.swing.GroupLayout pageButtonPanelLayout = new javax.swing.GroupLayout(pageButtonPanel);
        pageButtonPanel.setLayout(pageButtonPanelLayout);
        pageButtonPanelLayout.setHorizontalGroup(
            pageButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );
        pageButtonPanelLayout.setVerticalGroup(
            pageButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnNext.setBackground(new java.awt.Color(102, 102, 102));
        btnNext.setFont(new java.awt.Font("Poppins Black", 1, 14)); // NOI18N
        btnNext.setForeground(new java.awt.Color(255, 255, 255));
        btnNext.setText(">>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelCategories)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnPrint)
                            .addGap(18, 18, 18)
                            .addComponent(btnPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pageButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 857, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCategories)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPrev, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pageButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menuData11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuData11MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_menuData11MouseClicked

    private void menuInput11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuInput11MouseClicked
        Input input = new Input(); // Instantiate the Input class
        input.setVisible(true);    // Show the Input window
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_menuInput11MouseClicked

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String searchQuery = txtSearch.getText().trim();  // Get the text from the search field
        int pageNumber = 0; // Set the current page (0 for the first page)
        if (!searchQuery.isEmpty()) {
            fetchTransactions(searchQuery, pageNumber, selectedYear, selectedMonth);
        } else {
            fetchTransactions(searchQuery, pageNumber, selectedYear, selectedMonth);
        }// TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        String month = String.valueOf(comboMonth.getSelectedItem());
        String year = String.valueOf(comboYear.getSelectedItem());

        // Create a JFileChooser to let the user select the location and file name
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save CSV File");

        // Set the file filter to only show CSV files
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("CSV Files", "csv"));

        // Set the default file name based on the selected year and month
        String defaultFileName = "transactions_" + year + "_" + month + ".csv";
        fileChooser.setSelectedFile(new File(defaultFileName));

        // Show the save dialog
        int userSelection = fileChooser.showSaveDialog(this);

        // If the user selects a file location, save the file
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            // Get the file selected by the user
            File fileToSave = fileChooser.getSelectedFile();

            // Ensure the file ends with ".csv"
            String filePath = fileToSave.getAbsolutePath();
            if (!filePath.endsWith(".csv")) {
                filePath += ".csv";
            }

            // Call the method to print the CSV
            printCsv(month, year, filePath);
            JOptionPane.showMessageDialog(this, "CSV file saved successfully at: " + filePath, "Success", JOptionPane.INFORMATION_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        if (currentPage > 0) {
            currentPage--;
            fetchTransactions(txtSearch.getText().trim(), currentPage, selectedYear, selectedMonth);
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        String searchQuery = txtSearch.getText().trim();
        if (currentPage < totalPages - 1) {
            currentPage++;
            fetchTransactions(searchQuery, currentPage, selectedYear, selectedMonth);
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnHome11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHome11MouseClicked
        UserDashboard home = new UserDashboard(); // Instantiate the Input class
        home.setVisible(true);    // Show the Input window
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_btnHome11MouseClicked

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        UserSession.clearSession();

        Login login = new Login();
        login.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void updatePrevNextButtons() {
        btnPrev.setEnabled(currentPage > 0);
        btnNext.setEnabled(currentPage < totalPages - 1);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Data().setVisible(true);
            }
        });
    }

    private void fetchTransactions(String searchQuery, int pageNumber, int selectedYear, String selectedMonth) {
        int offset = pageNumber * pageSize; // Offset for pagination

        String sql = "SELECT invoice, strftime('%d-%m-%Y' , date_time) AS date_time, customers.name AS customer, discount_percent, discount_idr, gross_total, net_total, "
                + "payment_amount, payment_change "
                + "FROM transactions "
                + "JOIN customers ON customer_id = id "
                + "WHERE strftime('%Y', date_time) = TRIM(?) AND strftime('%m' ,date_time) = TRIM(?) "
                + "AND (invoice LIKE ? OR date_time LIKE TRIM(?) OR customers.name LIKE ?) "
                + "LIMIT ? OFFSET ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, selectedYear);
            ps.setString(2, selectedMonth);
            ps.setString(3, "%" + searchQuery + "%");
            ps.setString(4, "%" + searchQuery + "%");
            ps.setString(5, "%" + searchQuery + "%");
            ps.setInt(6, pageSize);
            ps.setInt(7, offset);

            try (ResultSet rs = ps.executeQuery()) {
                DefaultTableModel model = (DefaultTableModel) tableTransactions.getModel();
                model.setRowCount(0);  // Clear the table

                int no = offset + 1;
                while (rs.next()) {
                    String discountPercent = rs.getString("discount_percent");
                    String formattedDiscountPercent = discountPercent != null ? discountPercent + "%" : "0%";

                    String discountIDR = rs.getString("discount_idr");
                    String formattedDiscountIDR = discountIDR != null ? "Rp " + String.format("%,.0f", Double.valueOf(discountIDR)) : "Rp 0";
                    model.addRow(new Object[]{
                        no++, // Row number
                        rs.getString("invoice"), // Category name
                        rs.getString("date_time"),
                        rs.getString("customer"),
                        formattedDiscountPercent,
                        formattedDiscountIDR,
                        "Rp " + String.format("%,.0f", Double.valueOf(rs.getString("gross_total"))), // Gross Total
                        "Rp " + String.format("%,.0f", Double.valueOf(rs.getString("net_total"))), // Net Total
                        "Rp " + String.format("%,.0f", Double.valueOf(rs.getString("payment_amount"))), // Payment Amount
                        "Rp " + String.format("%,.0f", Double.valueOf(rs.getString("payment_change"))) // Payment Change
                    });
                }
            }

            // Calculate total pages
            calculateTotalPages(searchQuery);
            updatePageNumbers();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading categories: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void printCsv(String month, String year, String filePath) {
        String sql = "SELECT invoice, date_time, customers.name AS customer, discount_percent, discount_idr, gross_total, net_total, "
                + "payment_amount, payment_change "
                + "FROM transactions "
                + "JOIN customers ON customer_id = id "
                + "WHERE strftime('%Y', date_time) = TRIM(?) AND strftime('%m', date_time) = TRIM(?) ";

        // Use try-with-resources for all closeable resources
        try (PreparedStatement ps = conn.prepareStatement(sql); FileWriter writer = new FileWriter(filePath); CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT
                .withHeader("No", "Invoice", "Date Time", "Customer", "Discount %", "Discount IDR",
                        "Gross Total", "Net Total", "Payment Amount", "Payment Change"))) {

            ps.setString(1, year);
            ps.setString(2, month);

            try (ResultSet rs = ps.executeQuery()) {
                int no = 1;
                while (rs.next()) {
                    // Use more robust null handling and parsing
                    double discountPercent = rs.getDouble("discount_percent");
                    double discountIDR = rs.getDouble("discount_idr");
                    double grossTotal = rs.getDouble("gross_total");
                    double netTotal = rs.getDouble("net_total");
                    double paymentAmount = rs.getDouble("payment_amount");
                    double paymentChange = rs.getDouble("payment_change");

                    csvPrinter.printRecord(
                            no++,
                            rs.getString("invoice"),
                            rs.getString("date_time"),
                            rs.getString("customer"),
                            discountPercent == 0 ? "0" : String.format("%.0f", discountPercent),
                            discountIDR == 0 ? "0" : String.format("%.0f", discountIDR),
                            String.format("%.0f", grossTotal),
                            String.format("%.0f", netTotal),
                            String.format("%.0f", paymentAmount),
                            String.format("%.0f", paymentChange)
                    );
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "File error: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void calculateTotalPages(String searchQuery) {
        String countSql = "SELECT COUNT(*) FROM categories WHERE name LIKE ?";
        try (PreparedStatement ps = conn.prepareStatement(countSql)) {
            ps.setString(1, "%" + searchQuery + "%");

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int totalItems = rs.getInt(1);
                    totalPages = (int) Math.ceil((double) totalItems / pageSize);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error calculating total pages: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updatePageNumbers() {
        pageButtonPanel.removeAll();
        int maxButtonsToShow = 2;
        int buttonsShown = 0;  // Counter for buttons displayed

        for (int i = 0; i < totalPages; i++) {
            // Show first page or within the maxButtonsToShow limit around current page
            if (i == 0 || (i >= currentPage && buttonsShown < maxButtonsToShow)) {
                JButton pageButton = new JButton(String.valueOf(i + 1));
                pageButton.setBackground(new Color(102, 102, 102));
                pageButton.setForeground(Color.WHITE);
                pageButton.setPreferredSize(new Dimension(50, 29));

                if (i == currentPage) {
                    pageButton.setEnabled(false);
                    pageButton.setBackground(new Color(128, 128, 128));
                }

                pageButton.addActionListener(e -> {
                    currentPage = Integer.parseInt(pageButton.getText()) - 1;
                    fetchTransactions(txtSearch.getText().trim(), currentPage, selectedYear, selectedMonth);
                    updatePageNumbers();
                });
                pageButtonPanel.add(pageButton);

                if (i >= currentPage) {
                    buttonsShown++;
                }
            } // Add ellipsis after first page if there's a gap
            else if (i == 1 && currentPage > 1) {
                JLabel ellipsisLabel = new JLabel("...");
                ellipsisLabel.setPreferredSize(new Dimension(30, 29));
                ellipsisLabel.setHorizontalAlignment(SwingConstants.CENTER);
                pageButtonPanel.add(ellipsisLabel);
                i = currentPage - 1; // Skip to current page
            } // Add ellipsis and last page if there are more pages
            else if (buttonsShown == maxButtonsToShow && i < totalPages - 1) {
                JLabel ellipsisLabel = new JLabel("...");
                ellipsisLabel.setPreferredSize(new Dimension(30, 29));
                ellipsisLabel.setHorizontalAlignment(SwingConstants.CENTER);
                pageButtonPanel.add(ellipsisLabel);

                // Add last page button
                JButton lastPageButton = new JButton(String.valueOf(totalPages));
                lastPageButton.setBackground(new Color(102, 102, 102));
                lastPageButton.setForeground(Color.WHITE);
                lastPageButton.setPreferredSize(new Dimension(50, 29));
                lastPageButton.addActionListener(e -> {
                    currentPage = totalPages - 1;
                    fetchTransactions(txtSearch.getText().trim(), currentPage, selectedYear, selectedMonth);
                    updatePageNumbers();
                });
                pageButtonPanel.add(lastPageButton);

                break; // Exit the loop since we've shown all needed buttons
            }
        }

        updatePrevNextButtons();

        pageButtonPanel.setLayout(new FlowLayout());
        pageButtonPanel.revalidate();
        pageButtonPanel.repaint();
    }

    private void populateYearComboBox() {
        comboYear.removeAllItems(); // Clear existing items

        String query = "SELECT DISTINCT strftime('%Y', date_time) AS year FROM transactions ORDER BY date_time ASC";

        try (PreparedStatement stmt = conn.prepareStatement(query); ResultSet rs = stmt.executeQuery()) {
            boolean hasData = false; // Flag to check if any years are found

            while (rs.next()) {
                int year = rs.getInt("year");
                comboYear.addItem(String.valueOf(year)); // Add the year to the combo box as a String
                hasData = true; // Mark that at least one year exists
            }

            // Disable the button if no data is found
            comboYear.setEnabled(hasData);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading years: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            // Disable the button in case of an error
            comboYear.setEnabled(false);
        }
    }

// Method to populate the Month ComboBox
    private void populateMonthComboBox() {
        comboMonth.removeAllItems(); // Clear existing items

        // Check if a year is selected
        Object selectedYear = comboYear.getSelectedItem();
        if (selectedYear == null) {
            comboMonth.setEnabled(false); // Disable the month combo box if no year is selected
            return;
        }

        // Populate the month combo box with month values
        for (int i = 1; i <= 12; i++) {
            comboMonth.addItem(String.format("%02d", i)); // Add months as String (01 to 12)
        }

        comboMonth.setEnabled(true); // Enable the month combo box if data is added
    }

    private void onYearChanged(ActionEvent event) {
        updateSelectedDate();
    }

// Event handler for Month ComboBox selection
    private void onMonthChanged(ActionEvent event) {
        updateSelectedDate();
    }

// Update the selected date label based on the selected year and month
    private void updateSelectedDate() {
        try {
            if (comboYear.getSelectedItem() != null && comboMonth.getSelectedItem() != null) {
                selectedYear = Integer.parseInt((String) comboYear.getSelectedItem());
                selectedMonth = (String) comboMonth.getSelectedItem();
                fetchTransactions(txtSearch.getText().trim(), currentPage, selectedYear, selectedMonth);
            }
        } catch (NumberFormatException e) {
            System.out.println("Error parsing numbers"); // Debug print
        }
    }

    private void customizeTable() {
        // Set font for the table's cells
        Font tableFont = new Font("Arial", Font.PLAIN, 12);  // Change the font size as needed
        tableTransactions.setFont(tableFont);  // Apply to the table cells

        // Set font for the table's header
        JTableHeader tableHeader = tableTransactions.getTableHeader();
        tableHeader.setFont(new Font("Arial", Font.BOLD, 12));  // Set a bigger font for the header

        // Adjust the row height to fit the larger font size
        tableTransactions.setRowHeight(30);  // Set a larger row height if needed
    }

    static class CurrencyFilter extends DocumentFilter {

        private final DecimalFormat currencyFormat;

        public CurrencyFilter() {
            // Create a DecimalFormat for IDR
            currencyFormat = (DecimalFormat) NumberFormat.getCurrencyInstance(new Locale("id", "ID"));
            currencyFormat.setMaximumFractionDigits(0); // No decimal places for IDR
            currencyFormat.setGroupingUsed(true); // Use grouping separators
            currencyFormat.setPositivePrefix("Rp ");
        }

        @Override
        public void insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
            if (string == null) {
                return;
            }
            String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
            String newText = currentText.substring(0, offset) + string + currentText.substring(offset);
            updateText(fb, newText);
        }

        @Override
        public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String string, AttributeSet attrs) throws BadLocationException {
            String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
            String newText = currentText.substring(0, offset) + string + currentText.substring(offset + length);
            updateText(fb, newText);
        }

        @Override
        public void remove(DocumentFilter.FilterBypass fb, int offset, int length) throws BadLocationException {
            String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
            String newText = currentText.substring(0, offset) + currentText.substring(offset + length);
            updateText(fb, newText);
        }

        private void updateText(DocumentFilter.FilterBypass fb, String text) throws BadLocationException {
            // Check for the negative sign and retain it
            boolean isNegative = text.startsWith("-");

            // Remove non-digit characters except for the minus sign
            String numericText = text.replaceAll("[^\\d-]", "");
            if (numericText.isEmpty()) {
                numericText = "0";
            }

            // If the number is negative, parse it as a negative value
            long parsedValue = Long.parseLong(numericText.replace("-", ""));
            String formattedText = currencyFormat.format(parsedValue);

            // If it's negative, add the negative sign back in the formatted text
            if (isNegative) {
                formattedText = "-" + formattedText;
            }

            fb.replace(0, fb.getDocument().getLength(), formattedText, null);
        }
    }

    static class PercentageFilter extends DocumentFilter {

        @Override
        public void insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
            if (string == null) {
                return;
            }
            String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
            String newText = currentText.substring(0, offset) + string + currentText.substring(offset);
            updateText(fb, newText);
        }

        @Override
        public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String string, AttributeSet attrs) throws BadLocationException {
            String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
            String newText = currentText.substring(0, offset) + string + currentText.substring(offset + length);
            updateText(fb, newText);
        }

        @Override
        public void remove(DocumentFilter.FilterBypass fb, int offset, int length) throws BadLocationException {
            String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
            String newText = currentText.substring(0, offset) + currentText.substring(offset + length);
            updateText(fb, newText);
        }

        private void updateText(DocumentFilter.FilterBypass fb, String text) throws BadLocationException {
            // Remove non-digit characters (except for the decimal point)
            String numericText = text.replaceAll("[^\\d.]", "");

            // Avoid the decimal point being the first character
            if (numericText.isEmpty()) {
                numericText = "0";
            }

            // Limit the number of decimals to two (optional)
            if (numericText.contains(".")) {
                int decimalIndex = numericText.indexOf(".");
                String integerPart = numericText.substring(0, decimalIndex);
                String decimalPart = numericText.substring(decimalIndex + 1);
                if (decimalPart.length() > 2) {
                    decimalPart = decimalPart.substring(0, 2);  // Limit to two decimal places
                }
                numericText = integerPart + "." + decimalPart;
            }

            // Format the numericText and add the percentage sign
            String formattedText = numericText + "%";

            // Replace the text with the formatted percentage
            fb.replace(0, fb.getDocument().getLength(), formattedText, null);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnHome11;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnPrint;
    private javax.swing.JComboBox<String> comboMonth;
    private javax.swing.JComboBox<String> comboYear;
    private javax.swing.JLabel iconData11;
    private javax.swing.JLabel iconHome11;
    private javax.swing.JLabel iconInput11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JLabel labelCategories;
    private javax.swing.JLabel menuData11;
    private javax.swing.JLabel menuInput11;
    private javax.swing.JPanel pageButtonPanel;
    private javax.swing.JTable tableTransactions;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JLabel txtSession;
    // End of variables declaration//GEN-END:variables
}
