/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views.admin;

import Config.UserSession;
import Config.constant;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.util.Locale;
import java.util.Random;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JPasswordField;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import org.mindrot.jbcrypt.BCrypt;
import views.Login;

/**
 *
 * @author FryenX
 */
public class ManageProducts extends javax.swing.JFrame {

    /**
     * Creates new form ManageProducts
     */
    public ManageProducts() {
        initComponents();
        txtSession.setText(UserSession.getName());
        customizeTable();
        String searchQuery = txtSearch.getText().trim();
        int pageNumber = 0; // Set the current page (0 for the first page)
        fetchProducts(searchQuery, pageNumber);
        Icon();
    }

    private final Connection conn = (Connection) constant.connect();
    private int currentPage = 0;
    private int totalPages = 0;
    private final int pageSize = 10;
    public JComboBox<ComboCategories> comboCategories;
    public JComboBox<ComboUnits> comboUnits;
    private File targetFile;
    private File selectedImageFile;
    private File targetImageFile;
    private String imagePath;

    private void Icon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/image/icon.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelUnits = new javax.swing.JLabel();
        btnAddProduct = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProducts = new javax.swing.JTable();
        btnPrev = new javax.swing.JButton();
        pageButtonsPanel = new javax.swing.JPanel();
        btnNext = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnTransactions = new javax.swing.JLabel();
        btnHome = new javax.swing.JLabel();
        iconHome = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnUsers = new javax.swing.JLabel();
        btnCategories = new javax.swing.JLabel();
        btnUnits = new javax.swing.JLabel();
        btnProducts = new javax.swing.JLabel();
        btnLevels = new javax.swing.JLabel();
        iconCategories = new javax.swing.JLabel();
        iconUnits = new javax.swing.JLabel();
        iconProducts = new javax.swing.JLabel();
        iconLevels = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        iconTransactions = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtSession = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelUnits.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        labelUnits.setText("Products");

        btnAddProduct.setBackground(new java.awt.Color(0, 153, 255));
        btnAddProduct.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnAddProduct.setForeground(new java.awt.Color(255, 255, 255));
        btnAddProduct.setText("Add Data");
        btnAddProduct.setBorder(null);
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel2.setText("Search:");

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(51, 204, 0));
        btnEdit.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnEdit.setText("Edit");
        btnEdit.setBorder(null);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(204, 0, 0));
        btnDelete.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setBorder(null);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Barcode", "Product", "Image", "Category", "Unit", "Buy Price (IDR)", "Sell Price (IDR)", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProducts.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(tableProducts);
        if (tableProducts.getColumnModel().getColumnCount() > 0) {
            tableProducts.getColumnModel().getColumn(0).setMinWidth(40);
            tableProducts.getColumnModel().getColumn(0).setPreferredWidth(40);
            tableProducts.getColumnModel().getColumn(0).setMaxWidth(40);
            tableProducts.getColumnModel().getColumn(4).setMinWidth(80);
            tableProducts.getColumnModel().getColumn(4).setPreferredWidth(80);
            tableProducts.getColumnModel().getColumn(4).setMaxWidth(80);
            tableProducts.getColumnModel().getColumn(5).setMinWidth(50);
            tableProducts.getColumnModel().getColumn(5).setPreferredWidth(50);
            tableProducts.getColumnModel().getColumn(5).setMaxWidth(50);
            tableProducts.getColumnModel().getColumn(8).setMinWidth(60);
            tableProducts.getColumnModel().getColumn(8).setPreferredWidth(60);
            tableProducts.getColumnModel().getColumn(8).setMaxWidth(60);
        }

        btnPrev.setBackground(new java.awt.Color(102, 102, 102));
        btnPrev.setFont(new java.awt.Font("Poppins Black", 1, 14)); // NOI18N
        btnPrev.setForeground(new java.awt.Color(255, 255, 255));
        btnPrev.setText("<<");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        pageButtonsPanel.setAlignmentX(0.0F);
        pageButtonsPanel.setAlignmentY(0.0F);

        javax.swing.GroupLayout pageButtonsPanelLayout = new javax.swing.GroupLayout(pageButtonsPanel);
        pageButtonsPanel.setLayout(pageButtonsPanelLayout);
        pageButtonsPanelLayout.setHorizontalGroup(
            pageButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );
        pageButtonsPanelLayout.setVerticalGroup(
            pageButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );

        btnNext.setBackground(new java.awt.Color(102, 102, 102));
        btnNext.setFont(new java.awt.Font("Poppins Black", 1, 14)); // NOI18N
        btnNext.setForeground(new java.awt.Color(255, 255, 255));
        btnNext.setText(">>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        btnTransactions.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnTransactions.setForeground(new java.awt.Color(255, 255, 255));
        btnTransactions.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnTransactions.setText("Transactions");
        btnTransactions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTransactionsMouseClicked(evt);
            }
        });

        btnHome.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnHome.setForeground(new java.awt.Color(255, 255, 255));
        btnHome.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnHome.setText("Home");
        btnHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHomeMouseClicked(evt);
            }
        });

        iconHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/chart-simple-solid.png"))); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/users-solid.png"))); // NOI18N

        btnUsers.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnUsers.setForeground(new java.awt.Color(255, 255, 255));
        btnUsers.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnUsers.setText("Users");
        btnUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUsersMouseClicked(evt);
            }
        });

        btnCategories.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnCategories.setForeground(new java.awt.Color(255, 255, 255));
        btnCategories.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCategories.setText("Categories");
        btnCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCategoriesMouseClicked(evt);
            }
        });

        btnUnits.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnUnits.setForeground(new java.awt.Color(255, 255, 255));
        btnUnits.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnUnits.setText("Units");
        btnUnits.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUnitsMouseClicked(evt);
            }
        });

        btnProducts.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnProducts.setForeground(new java.awt.Color(255, 255, 255));
        btnProducts.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnProducts.setText("Products");
        btnProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnProductsMouseClicked(evt);
            }
        });

        btnLevels.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnLevels.setForeground(new java.awt.Color(255, 255, 255));
        btnLevels.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnLevels.setText("Levels");
        btnLevels.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLevelsMouseClicked(evt);
            }
        });

        iconCategories.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/list-solid.png"))); // NOI18N

        iconUnits.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/list-solid.png"))); // NOI18N

        iconProducts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/table-solid.png"))); // NOI18N

        iconLevels.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/share-solid.png"))); // NOI18N

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        jSeparator2.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        iconTransactions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/table-solid.png"))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setMinimumSize(new java.awt.Dimension(194, 100));

        txtSession.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        txtSession.setText("NAME");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(txtSession)
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSession)
                .addContainerGap())
        );

        btnLogout.setBackground(new java.awt.Color(255, 0, 0));
        btnLogout.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(255, 255, 255));
        btnLogout.setText("LOGOUT");
        btnLogout.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(iconTransactions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTransactions, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(iconHome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHome))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(iconCategories)
                            .addComponent(iconUnits)
                            .addComponent(iconLevels)
                            .addComponent(iconProducts))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCategories)
                            .addComponent(btnUsers)
                            .addComponent(btnUnits)
                            .addComponent(btnProducts)
                            .addComponent(btnLevels))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(iconHome)
                    .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUsers)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCategories)
                    .addComponent(iconCategories))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUnits)
                    .addComponent(iconUnits))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnProducts)
                    .addComponent(iconProducts))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLevels)
                    .addComponent(iconLevels))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnTransactions)
                    .addComponent(iconTransactions))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(364, 364, 364)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelUnits))
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pageButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 827, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(labelUnits)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnNext)
                    .addComponent(pageButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrev))
                .addContainerGap(88, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    static class ComboCategories {

        private final int category_id;
        private final String category;

        public ComboCategories(int category_id, String category) {
            this.category_id = category_id;
            this.category = category;
        }

        public int getId() {
            return category_id;
        }

        public String getName() {
            return category;
        }

        @Override
        public String toString() {
            return category; // Display the level name in the JComboBox
        }
    }

    static class ComboUnits {

        private final int unit_id;
        private final String unit;

        public ComboUnits(int unit_id, String unit) {
            this.unit_id = unit_id;
            this.unit = unit;
        }

        public int getId() {
            return unit_id;
        }

        public String getName() {
            return unit;
        }

        @Override
        public String toString() {
            return unit; // Display the level name in the JComboBox
        }
    }

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        JDialog addUserDialog = new JDialog(this, "Add New Product", true);
        addUserDialog.setSize(450, 430);
        addUserDialog.setLayout(new BorderLayout());

        // Panel for input
        JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JPanel formPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5); // Small gaps around components
        gbc.fill = GridBagConstraints.HORIZONTAL; // Nested panel for the form layout

        JLabel lblBarcode = new JLabel("Barcode:");
        JTextField txtBarcode = new JTextField(20); // Set preferred width for the input field
        JLabel lblName = new JLabel("Product Name:");
        JTextField txtName = new JTextField(20);
        JLabel lblCategory = new JLabel("Categoy:");
        comboCategories = new JComboBox<>();
        JButton btnAddCategory = new JButton("Add");
        btnAddCategory.addActionListener(e -> {
            ManageCategories manageCategories = new ManageCategories(this);
            manageCategories.btnAddCategoriesActionPerformed(e);
        });
        JLabel lblUnit = new JLabel("Unit:");
        comboUnits = new JComboBox<>();
        JButton btnAddUnit = new JButton("Add");
        btnAddUnit.addActionListener(e -> {
            ManageUnits manageUnits = new ManageUnits(this);
            manageUnits.btnAddUnitsActionPerformed(e);
        });
        JLabel lblBuyPrice = new JLabel("Buy Price:");
        JTextField txtBuyPrice = new JTextField(20);
        JLabel lblSellPrice = new JLabel("Sell Price:");
        JTextField txtSellPrice = new JTextField(20);
        JLabel lblStock = new JLabel("Stock:");
        JTextField txtStock = new JTextField("0", 20);
        JLabel lblImage = new JLabel("Product Image:");
        JTextField txtImage = new JTextField(20);
        txtImage.setEditable(false);
        txtImage.setFocusable(false);
        txtImage.setBackground(new Color(204, 204, 204));
        JButton btnBrowseImage = new JButton("Browse");
        btnBrowseImage.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Select Product Image");
            fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png", "gif"));
            int result = fileChooser.showOpenDialog(addUserDialog);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                String fileExtension = selectedFile.getName().substring(selectedFile.getName().lastIndexOf("."));
                Random random = new Random();
                String randomDigits = String.format("%03d", random.nextInt(1000));
                String productName = txtName.getText().replaceAll("\\s+", "_");
                String newFileName = productName + "_" + randomDigits + fileExtension;
                String targetPath = "assets/image/products/" + newFileName;
                targetFile = new File(targetPath);

                // Store file information for later use
                selectedImageFile = selectedFile;
                targetImageFile = targetFile;

                // Store relative path for database (relative to "src")
                imagePath = "assets/image/products/" + newFileName;  // Relative path to "src" folder
                txtImage.setText(newFileName);  // Update the text field with the new file name
            }
        });

        btnBrowseImage.setEnabled(false);

        txtName.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkNameField();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkNameField();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                checkNameField();
            }

            private void checkNameField() {
                // Enable the Browse button only if the product name field is not empty
                if (txtName.getText().trim().isEmpty()) {
                    btnBrowseImage.setEnabled(false);
                } else {
                    btnBrowseImage.setEnabled(true);
                }
            }
        });

        productFetchCategories();
        productFetchUnits();

        txtStock.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                txtStock.selectAll(); // Select all text when focused
            }

            @Override
            public void focusLost(FocusEvent e) {
                // Do nothing when focus is lost
            }
        });

        btnAddCategory.setBackground(Color.BLUE);  // Set the background color to blue
        btnAddCategory.setForeground(Color.WHITE);

        btnAddUnit.setBackground(Color.BLUE);  // Set the background color to blue
        btnAddUnit.setForeground(Color.WHITE);

        ((AbstractDocument) txtStock.getDocument()).setDocumentFilter(new StockFilter());
        ((AbstractDocument) txtBuyPrice.getDocument()).setDocumentFilter(new CurrencyFilter());
        ((AbstractDocument) txtSellPrice.getDocument()).setDocumentFilter(new CurrencyFilter());

        gbc.gridx = 0;
        gbc.gridy = 0;
        formPanel.add(lblBarcode, gbc);
        gbc.gridx = 1;
        formPanel.add(txtBarcode, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        formPanel.add(lblName, gbc);
        gbc.gridx = 1;
        formPanel.add(txtName, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        formPanel.add(lblCategory, gbc);
        gbc.gridx = 1;
        formPanel.add(comboCategories, gbc);
        gbc.gridx = 2;
        formPanel.add(btnAddCategory, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        formPanel.add(lblUnit, gbc);
        gbc.gridx = 1;
        formPanel.add(comboUnits, gbc);
        gbc.gridx = 2;
        formPanel.add(btnAddUnit, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        formPanel.add(lblBuyPrice, gbc);
        gbc.gridx = 1;
        formPanel.add(txtBuyPrice, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        formPanel.add(lblSellPrice, gbc);
        gbc.gridx = 1;
        formPanel.add(txtSellPrice, gbc);

        gbc.gridx = 0;
        gbc.gridy = 6;
        formPanel.add(lblStock, gbc);
        gbc.gridx = 1;
        formPanel.add(txtStock, gbc);

        gbc.gridx = 0;
        gbc.gridy = 7;
        formPanel.add(lblImage, gbc);
        gbc.gridx = 1;
        formPanel.add(txtImage, gbc);

        gbc.gridx = 1;
        gbc.gridy = 8;
        formPanel.add(btnBrowseImage, gbc);

        inputPanel.add(formPanel); // Add the form panel to the input panel

        // Panel for buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton btnSave = new JButton("Save");
        JButton btnCancel = new JButton("Cancel");

// Set the "Save" button to green with white text
        btnSave.setBackground(Color.GREEN);
        btnSave.setForeground(Color.WHITE);

// Set the "Cancel" button to red with white text
        btnCancel.setBackground(Color.RED);
        btnCancel.setForeground(Color.WHITE);
        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);

        addUserDialog.add(inputPanel, BorderLayout.CENTER);
        addUserDialog.add(buttonPanel, BorderLayout.SOUTH);

        // Handle Save button
        btnSave.addActionListener(e -> {
            ComboCategories selectedCategory = (ComboCategories) comboCategories.getSelectedItem();
            int categoryId = selectedCategory.getId();
            ComboUnits selectedUnit = (ComboUnits) comboUnits.getSelectedItem();
            int unitId = selectedUnit.getId();
            String Barcode = txtBarcode.getText().trim();
            String Name = txtName.getText().trim();
            String Category = String.valueOf(categoryId);
            String Unit = String.valueOf(unitId);
            String Image = imagePath;
            String BuyPrice = getPlainNumber(txtBuyPrice.getText().trim());
            String SellPrice = getPlainNumber(txtSellPrice.getText().trim());
            String Stock = txtStock.getText().trim();

            if (Barcode.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Barcode cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (Name.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Name cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (BuyPrice.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Buy Price cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (SellPrice.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Sell Price cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (Stock.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Stock cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!isBarcodeUnique(Barcode)) {
                JOptionPane.showMessageDialog(addUserDialog, "Barcode is already taken. Please choose another.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try (PreparedStatement ps = conn.prepareStatement("INSERT INTO products (barcode, name, unit_id, category_id, stocks, purchase_price, sell_price, image) VALUES (?, ?, ?, ?, ?, ?, ?, ?)")) {
                ps.setString(1, Barcode);
                ps.setString(2, Name);
                ps.setString(3, Unit);
                ps.setString(4, Category);
                ps.setString(5, Stock);
                ps.setString(6, BuyPrice);
                ps.setString(7, SellPrice);
                ps.setString(8, Image);
                ps.executeUpdate();
                if (selectedImageFile != null && targetImageFile != null) {
                    Files.copy(selectedImageFile.toPath(), targetImageFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                }
                JOptionPane.showMessageDialog(addUserDialog, "Product added successfully!");
                addUserDialog.dispose(); // Close the dialog

                String searchQuery = txtSearch.getText().trim();
                int pageNumber = 0; // Set the current page (0 for the first page)
                fetchProducts(searchQuery, pageNumber);
                updatePrevNextButtons();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(addUserDialog, "Error adding user: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                Logger.getLogger(ManageProducts.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        // Handle Cancel button
        btnCancel.addActionListener(e -> addUserDialog.dispose());

        addUserDialog.setLocationRelativeTo(this); // Center dialog
        addUserDialog.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddProductActionPerformed

    public void productFetchCategories() {
        try (PreparedStatement ps = conn.prepareStatement("SELECT id, name FROM categories"); ResultSet rs = ps.executeQuery()) {
            comboCategories.removeAllItems();  // Clear existing items
            while (rs.next()) {
                int category_id = rs.getInt("id");
                String category = rs.getString("name");
                comboCategories.addItem(new ComboCategories(category_id, category));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error fetching categories: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void productFetchUnits() {
        try (PreparedStatement ps = conn.prepareStatement("SELECT id, name FROM units"); ResultSet rs = ps.executeQuery()) {
            comboUnits.removeAllItems();  // Clear existing items
            while (rs.next()) {
                int unitId = rs.getInt("id");
                String unitName = rs.getString("name");
                comboUnits.addItem(new ComboUnits(unitId, unitName));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error fetching units: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String searchQuery = txtSearch.getText().trim();  // Get the text from the search field
        int pageNumber = 0; // Set the current page (0 for the first page)
        if (!searchQuery.isEmpty()) {
            fetchProducts(searchQuery, pageNumber);
        } else {
            fetchProducts(searchQuery, pageNumber);
        }// TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int selectedRow = tableProducts.getSelectedRow();
        if (selectedRow != -1) {
            String barcode = getSelectedProductId();  // ID from the hidden column

            String query = "SELECT name, category_id, unit_id, stocks, purchase_price, sell_price, image FROM products WHERE barcode = ?";
            try (PreparedStatement ps = conn.prepareStatement(query)) {
                ps.setString(1, barcode); // Set the ID parameter for the query
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        String productName = rs.getString("name");
                        String pathImage = rs.getString("image");
                        int category = rs.getInt("category_id");
                        int unit = rs.getInt("unit_id");
                        String buyPrice = rs.getString("purchase_price");
                        String sellPrice = rs.getString("sell_price");
                        String stock = rs.getString("stocks");

                        // Call editUser method with the retrieved data
                        String searchQuery = txtSearch.getText().trim(); // Get the current search query
                        editProduct(barcode, productName, pathImage, category, unit, buyPrice, sellPrice, stock, searchQuery);  // Pass all necessary data to editUser

                    } else {
                        JOptionPane.showMessageDialog(this, "Product not found.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error fetching user data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a product first.", "No Selection", JOptionPane.WARNING_MESSAGE);
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String barcode = getSelectedProductId();
        if (barcode != null) {
            String searchQuery = txtSearch.getText().trim();
            String pathImage = getImage(barcode);
            deleteProduct(barcode, pathImage, searchQuery); // Your edit method
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        if (currentPage > 0) {
            currentPage--;
            fetchProducts(txtSearch.getText().trim(), currentPage);
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        String searchQuery = txtSearch.getText().trim();
        if (currentPage < totalPages - 1) {
            currentPage++;
            fetchProducts(searchQuery, currentPage);
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnTransactionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTransactionsMouseClicked
        Transactions transactions = new Transactions(); // Instantiate the Input class
        transactions.setVisible(true);    // Show the Input window
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTransactionsMouseClicked

    private void btnHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomeMouseClicked
        AdminDashboard adminDashboard = new AdminDashboard(); // Instantiate the Input class
        adminDashboard.setVisible(true);    // Show the Input window
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_btnHomeMouseClicked

    private void btnUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUsersMouseClicked
        ManageUsers manageUser = new ManageUsers(); // Instantiate the Input class
        manageUser.setVisible(true);    // Show the Input window
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_btnUsersMouseClicked

    private void btnCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCategoriesMouseClicked
        ManageCategories manageCategories = new ManageCategories(); // Instantiate the Input class
        manageCategories.setVisible(true);    // Show the Input window
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_btnCategoriesMouseClicked

    private void btnUnitsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUnitsMouseClicked
        ManageUnits manageUnits = new ManageUnits(); // Instantiate the Input class
        manageUnits.setVisible(true);    // Show the Input window
        this.dispose(); // TODO add your handling code here:
    }//GEN-LAST:event_btnUnitsMouseClicked

    private void btnProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnProductsMouseClicked

    }//GEN-LAST:event_btnProductsMouseClicked

    private void btnLevelsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLevelsMouseClicked
        ManageLevels manageLevels = new ManageLevels(); // Instantiate the Input class
        manageLevels.setVisible(true);    // Show the Input window
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_btnLevelsMouseClicked

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        UserSession.clearSession();

        Login login = new Login();
        login.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void updatePrevNextButtons() {
        btnPrev.setEnabled(currentPage > 0);
        btnNext.setEnabled(currentPage < totalPages - 1);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageProducts().setVisible(true);
            }
        });
    }

    private void fetchProducts(String searchQuery, int pageNumber) {
        int offset = pageNumber * pageSize;
        String sql = "SELECT barcode, products.name AS product, categories.name AS category, units.name AS unit, image, purchase_price, sell_price, stocks "
                + "FROM products LEFT JOIN categories ON categories.id = category_id "
                + "LEFT JOIN units ON units.id = unit_id "
                + "WHERE barcode LIKE ? OR products.name LIKE ? OR categories.name LIKE ? OR units.name LIKE ? LIMIT ? OFFSET ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, "%" + searchQuery + "%");
            ps.setString(2, "%" + searchQuery + "%");
            ps.setString(3, "%" + searchQuery + "%");
            ps.setString(4, "%" + searchQuery + "%");
            ps.setInt(5, pageSize);
            ps.setInt(6, offset);
            try (ResultSet rs = ps.executeQuery()) {
                DefaultTableModel model = (DefaultTableModel) tableProducts.getModel();
                model.setRowCount(0);
                tableProducts.setRowHeight(50);
                NumberFormat currencyFormat = new DecimalFormat("'Rp '###,###,###");
                int no = offset + 1;
                while (rs.next()) {
                    String purchasePrice = rs.getString("purchase_price");
                    String sellPrice = rs.getString("sell_price");
                    String PurchasePrice = currencyFormat.format(Double.parseDouble(purchasePrice));
                    String SellPrice = currencyFormat.format(Double.parseDouble(sellPrice));

                    String imagePaths = rs.getString("image");
                    Object imageColumn;

                    if (imagePaths == null || imagePaths.isEmpty() || !new File(imagePaths).exists()) {
                        // Create a JLabel with "Image Not Available" text in red
                        JLabel noImageLabel = new JLabel("Image Not Available");
                        noImageLabel.setForeground(Color.RED);
                        noImageLabel.setHorizontalAlignment(JLabel.CENTER);
                        imageColumn = noImageLabel;
                    } else {
                        ImageIcon imageIcon = new ImageIcon(imagePaths);
                        Image img = imageIcon.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
                        imageColumn = new ImageIcon(img);
                    }

                    String category = rs.getString("category");
                    if (category == null || category.trim().isEmpty()) {
                        category = "N/A";
                    }

                    String unit = rs.getString("unit");
                    if (unit == null || unit.trim().isEmpty()) {
                        unit = "N/A";
                    }

                    model.addRow(new Object[]{
                        no++,
                        rs.getString("barcode"),
                        rs.getString("product"),
                        imageColumn,
                        category,
                        unit,
                        PurchasePrice,
                        SellPrice,
                        rs.getString("stocks")
                    });
                }
            }

            // Custom renderer for the image column
            tableProducts.getColumnModel().getColumn(3).setCellRenderer((JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -> {
                if (value instanceof JLabel) {
                    // Return the "Image Not Available" label
                    return (JLabel) value;
                } else if (value instanceof ImageIcon icon) {
                    // Handle image icon
                    JLabel label = new JLabel();
                    Image img = icon.getImage().getScaledInstance(100, 50, Image.SCALE_SMOOTH);
                    label.setIcon(new ImageIcon(img));
                    label.setHorizontalAlignment(JLabel.CENTER);
                    return label;
                }
                return new JLabel();
            });

            tableProducts.getColumnModel().getColumn(4).setCellRenderer((table, value, isSelected, hasFocus, row, column) -> {
                JLabel label = new JLabel(value == null ? "" : value.toString());
                if ("N/A".equals(value)) {
                    label.setForeground(Color.RED);
                }
                label.setHorizontalAlignment(JLabel.CENTER);
                return label;
            });

            tableProducts.getColumnModel().getColumn(5).setCellRenderer((table, value, isSelected, hasFocus, row, column) -> {
                JLabel label = new JLabel(value == null ? "" : value.toString());
                if ("N/A".equals(value)) {
                    label.setForeground(Color.RED);
                }
                label.setHorizontalAlignment(JLabel.CENTER);
                return label;
            });

            calculateTotalPages(searchQuery);
            updatePageNumbers();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading products: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void calculateTotalPages(String searchQuery) {
        String countSql = "SELECT COUNT(*) FROM products WHERE name LIKE ?";
        try (PreparedStatement ps = conn.prepareStatement(countSql)) {
            ps.setString(1, "%" + searchQuery + "%");

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int totalItems = rs.getInt(1);
                    totalPages = (int) Math.ceil((double) totalItems / pageSize);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error calculating total pages: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updatePageNumbers() {
        pageButtonsPanel.removeAll();
        int maxButtonsToShow = 2;
        int buttonsShown = 0;  // Counter for buttons displayed

        for (int i = 0; i < totalPages; i++) {
            // Show first page or within the maxButtonsToShow limit around current page
            if (i == 0 || (i >= currentPage && buttonsShown < maxButtonsToShow)) {
                JButton pageButton = new JButton(String.valueOf(i + 1));
                pageButton.setBackground(new Color(102, 102, 102));
                pageButton.setForeground(Color.WHITE);
                pageButton.setPreferredSize(new Dimension(50, 29));

                if (i == currentPage) {
                    pageButton.setEnabled(false);
                    pageButton.setBackground(new Color(128, 128, 128));
                }

                pageButton.addActionListener(e -> {
                    currentPage = Integer.parseInt(pageButton.getText()) - 1;
                    fetchProducts(txtSearch.getText().trim(), currentPage);
                    updatePageNumbers();
                });
                pageButtonsPanel.add(pageButton);

                if (i >= currentPage) {
                    buttonsShown++;
                }
            } // Add ellipsis after first page if there's a gap
            else if (i == 1 && currentPage > 1) {
                JLabel ellipsisLabel = new JLabel("...");
                ellipsisLabel.setPreferredSize(new Dimension(30, 29));
                ellipsisLabel.setHorizontalAlignment(SwingConstants.CENTER);
                pageButtonsPanel.add(ellipsisLabel);
                i = currentPage - 1; // Skip to current page
            } // Add ellipsis and last page if there are more pages
            else if (buttonsShown == maxButtonsToShow && i < totalPages - 1) {
                JLabel ellipsisLabel = new JLabel("...");
                ellipsisLabel.setPreferredSize(new Dimension(30, 29));
                ellipsisLabel.setHorizontalAlignment(SwingConstants.CENTER);
                pageButtonsPanel.add(ellipsisLabel);

                // Add last page button
                JButton lastPageButton = new JButton(String.valueOf(totalPages));
                lastPageButton.setBackground(new Color(102, 102, 102));
                lastPageButton.setForeground(Color.WHITE);
                lastPageButton.setPreferredSize(new Dimension(50, 29));
                lastPageButton.addActionListener(e -> {
                    currentPage = totalPages - 1;
                    fetchProducts(txtSearch.getText().trim(), currentPage);
                    updatePageNumbers();
                });
                pageButtonsPanel.add(lastPageButton);

                break; // Exit the loop since we've shown all needed buttons
            }
        }

        updatePrevNextButtons();

        pageButtonsPanel.setLayout(new FlowLayout());
        pageButtonsPanel.revalidate();
        pageButtonsPanel.repaint();
    }

    private String getSelectedProductId() {
        int selectedRow = tableProducts.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a Product first.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return null; // Return null if no row is selected
        }

        // Get the table model
        DefaultTableModel model = (DefaultTableModel) tableProducts.getModel();

        // Ensure there are enough columns (you expect at least 3 columns: No, Name, ID)
        if (model.getColumnCount() > 2) {
            // Access the ID column (index 2)
            Object productIdObject = model.getValueAt(selectedRow, 1); // ID should be in column 1, not 2
            if (productIdObject instanceof String) {
                return (String) productIdObject; // Return the product ID as a String
            } else {
                JOptionPane.showMessageDialog(this, "Invalid product ID format.", "Error", JOptionPane.ERROR_MESSAGE);
                return null; // Return null if the ID format is invalid
            }
        } else {
            // Debugging: Show a message if the column count is not sufficient
            System.out.println("Table doesn't have enough columns for ID.");
            JOptionPane.showMessageDialog(this, "Table doesn't have enough columns for ID.", "Error", JOptionPane.ERROR_MESSAGE);
            return null; // Return null if the table doesn't have enough columns
        }
    }

    private void deleteProduct(String barcode, String pathImage, String searchQuery) {
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this product?", "Confirm Delete", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            try (PreparedStatement ps = conn.prepareStatement("DELETE FROM products WHERE barcode = ?")) {
                ps.setString(1, barcode);
                ps.executeUpdate();

                if (pathImage != null && !pathImage.isEmpty()) {
                    File imageFile = new File(pathImage);
                    if (imageFile.exists()) {
                        if (imageFile.delete()) {
                        } else {
                        }
                    }
                }

                JOptionPane.showMessageDialog(this, "Products deleted successfully!");
                int pageNumber = 0; // Set the current page (0 for the first page)
                fetchProducts(searchQuery, pageNumber);
                updatePrevNextButtons();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting product: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void editProduct(String barcode, String productName, String pathImage, int category, int unit, String buyPrice, String sellPrice, String stock, String searchQuery) {
        JDialog addUserDialog = new JDialog(this, "Add New Product", true);
        addUserDialog.setSize(450, 600);
        addUserDialog.setLayout(new BorderLayout());

        // Panel for input
        JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JPanel formPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5); // Small gaps around components
        gbc.fill = GridBagConstraints.HORIZONTAL; // Nested panel for the form layout

        JLabel lblBarcode = new JLabel("Barcode:");
        JTextField txtBarcode = new JTextField(20);
        txtBarcode.setText(barcode);
        txtBarcode.setEditable(false);
        txtBarcode.setFocusable(false);
        txtBarcode.setBackground(new Color(204, 204, 204));
        JLabel lblName = new JLabel("Product Name:");
        JTextField txtName = new JTextField(20);
        txtName.setText(productName);
        JLabel lblCategory = new JLabel("Categoy:");
        comboCategories = new JComboBox<>();
        JButton btnAddCategory = new JButton("Add");
        btnAddCategory.addActionListener(e -> {
            ManageCategories manageCategories = new ManageCategories(this);
            manageCategories.btnAddCategoriesActionPerformed(e);
        });
        JLabel lblUnit = new JLabel("Unit:");
        comboUnits = new JComboBox<>();
        JButton btnAddUnit = new JButton("Add");
        btnAddUnit.addActionListener(e -> {
            ManageUnits manageUnits = new ManageUnits(this);
            manageUnits.btnAddUnitsActionPerformed(e);
        });
        CurrencyFilter currencyFilter = new CurrencyFilter();
        double parsedBuyPrice = Double.parseDouble(buyPrice);
        double parsedSellPrice = Double.parseDouble(sellPrice);
        JLabel lblBuyPrice = new JLabel("Buy Price:");
        JTextField txtBuyPrice = new JTextField(20);
        txtBuyPrice.setText(currencyFilter.currencyFormat.format(parsedBuyPrice));
        JLabel lblSellPrice = new JLabel("Sell Price:");
        JTextField txtSellPrice = new JTextField(20);
        txtSellPrice.setText(currencyFilter.currencyFormat.format(parsedSellPrice));
        JLabel lblStock = new JLabel("Stock:");
        JTextField txtStock = new JTextField(20);
        txtStock.setText(stock);
        JLabel lblImage = new JLabel("Product Image:");
        JTextField txtImage = new JTextField(20);
        if (pathImage != null && !pathImage.isEmpty()) {
            try {
                String fileName = pathImage.substring(pathImage.lastIndexOf("/") + 1);
                String imageName = fileName.substring(0, fileName.lastIndexOf("_")) + fileName.substring(fileName.lastIndexOf("_"));
                txtImage.setText(imageName);
            } catch (Exception e) {
                txtImage.setText("No image");
            }
        } else {
            txtImage.setText("No image");
        }
        txtImage.setEditable(false);
        txtImage.setFocusable(false);
        txtImage.setBackground(new Color(204, 204, 204));
        JLabel productImage = new JLabel();

        productImage.setHorizontalAlignment(JLabel.CENTER);
        productImage.setVerticalAlignment(JLabel.CENTER);

        if (pathImage != null && !pathImage.isEmpty() && new File(pathImage).exists()) {
            ImageIcon imageIcon = new ImageIcon(pathImage);
            Image img = imageIcon.getImage().getScaledInstance(200, 150, Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(img);
            productImage.setIcon(scaledIcon);
        } else {
            // Set a "No Image" label
            productImage.setText("No Image Available");
            productImage.setForeground(Color.RED);
        }

        productImage.setPreferredSize(new Dimension(200, 150));
        JButton btnBrowseImage = new JButton("Browse");
        btnBrowseImage.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Select Product Image");
            fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png", "gif"));
            int result = fileChooser.showOpenDialog(addUserDialog);

            if (result == JFileChooser.APPROVE_OPTION) {
                // A new image is selected
                File selectedFile = fileChooser.getSelectedFile();
                String fileExtension = selectedFile.getName().substring(selectedFile.getName().lastIndexOf("."));
                Random random = new Random();
                String randomDigits = String.format("%03d", random.nextInt(1000));
                String productNameImage = txtName.getText().replaceAll("\\s+", "_");
                String newFileName = productNameImage + "_" + randomDigits + fileExtension;
                String targetPath = "assets/image/products/" + newFileName;
                targetFile = new File(targetPath);

                selectedImageFile = selectedFile;
                targetImageFile = targetFile;
                imagePath = targetPath;
                txtImage.setText(newFileName);

                // Update the image preview
                ImageIcon newImageIcon = new ImageIcon(selectedFile.getPath());
                Image newImg = newImageIcon.getImage().getScaledInstance(200, 150, Image.SCALE_SMOOTH);
                productImage.setIcon(new ImageIcon(newImg));
                productImage.setText(""); // Clear any "No Image" text

            } else {
                // Keep the existing image path when no new image is selected
                imagePath = pathImage;  // Keep the original path
            }
        });

        txtName.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkNameField();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkNameField();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                checkNameField();
            }

            private void checkNameField() {
                // Enable the Browse button only if the product name field is not empty
                if (txtName.getText().trim().isEmpty()) {
                    btnBrowseImage.setEnabled(false);
                } else {
                    btnBrowseImage.setEnabled(true);
                }
            }
        });

        productFetchCategories();
        productFetchUnits();

        int selectedCategoryId = category;
        int selectedUnitId = unit;

        for (int i = 0; i < comboCategories.getItemCount(); i++) {
            ComboCategories categoriesItem = comboCategories.getItemAt(i);
            if (categoriesItem.getId() == selectedCategoryId) {
                comboCategories.setSelectedItem(categoriesItem); // Pre-select the level that matches the user's level_id
                break;
            }
        }

        for (int i = 0; i < comboUnits.getItemCount(); i++) {
            ComboUnits unitItem = comboUnits.getItemAt(i);
            if (unitItem.getId() == selectedUnitId) {
                comboUnits.setSelectedItem(unitItem); // Pre-select the level that matches the user's level_id
                break;
            }
        }

        txtStock.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                txtStock.selectAll(); // Select all text when focused
            }

            @Override
            public void focusLost(FocusEvent e) {
                // Do nothing when focus is lost
            }
        });

        btnAddCategory.setBackground(Color.BLUE);  // Set the background color to blue
        btnAddCategory.setForeground(Color.WHITE);

        btnAddUnit.setBackground(Color.BLUE);  // Set the background color to blue
        btnAddUnit.setForeground(Color.WHITE);

        ((AbstractDocument) txtStock.getDocument()).setDocumentFilter(new StockFilter());
        ((AbstractDocument) txtBuyPrice.getDocument()).setDocumentFilter(new CurrencyFilter());
        ((AbstractDocument) txtSellPrice.getDocument()).setDocumentFilter(new CurrencyFilter());

        gbc.gridx = 0;
        gbc.gridy = 0;
        formPanel.add(lblBarcode, gbc);
        gbc.gridx = 1;
        formPanel.add(txtBarcode, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        formPanel.add(lblName, gbc);
        gbc.gridx = 1;
        formPanel.add(txtName, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        formPanel.add(lblCategory, gbc);
        gbc.gridx = 1;
        formPanel.add(comboCategories, gbc);
        gbc.gridx = 2;
        formPanel.add(btnAddCategory, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        formPanel.add(lblUnit, gbc);
        gbc.gridx = 1;
        formPanel.add(comboUnits, gbc);
        gbc.gridx = 2;
        formPanel.add(btnAddUnit, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        formPanel.add(lblBuyPrice, gbc);
        gbc.gridx = 1;
        formPanel.add(txtBuyPrice, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        formPanel.add(lblSellPrice, gbc);
        gbc.gridx = 1;
        formPanel.add(txtSellPrice, gbc);

        gbc.gridx = 0;
        gbc.gridy = 6;
        formPanel.add(lblStock, gbc);
        gbc.gridx = 1;
        formPanel.add(txtStock, gbc);

        gbc.gridx = 0;
        gbc.gridy = 7;
        formPanel.add(lblImage, gbc);
        gbc.gridx = 1;
        formPanel.add(txtImage, gbc);

        gbc.gridx = 1;
        gbc.gridy = 8;
        formPanel.add(productImage, gbc);

        gbc.gridx = 1;
        gbc.gridy = 9;
        formPanel.add(btnBrowseImage, gbc);

        inputPanel.add(formPanel); // Add the form panel to the input panel

        // Panel for buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton btnSave = new JButton("Save");
        JButton btnCancel = new JButton("Cancel");

// Set the "Save" button to green with white text
        btnSave.setBackground(Color.GREEN);
        btnSave.setForeground(Color.WHITE);

// Set the "Cancel" button to red with white text
        btnCancel.setBackground(Color.RED);
        btnCancel.setForeground(Color.WHITE);
        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);

        addUserDialog.add(inputPanel, BorderLayout.CENTER);
        addUserDialog.add(buttonPanel, BorderLayout.SOUTH);

        // Handle Save button
        btnSave.addActionListener(e -> {
            ComboCategories selectedCategory = (ComboCategories) comboCategories.getSelectedItem();
            int categoryId = selectedCategory.getId();
            ComboUnits selectedUnit = (ComboUnits) comboUnits.getSelectedItem();
            int unitId = selectedUnit.getId();
            String Barcode = txtBarcode.getText().trim();
            String Name = txtName.getText().trim();
            String Category = String.valueOf(categoryId);
            String Unit = String.valueOf(unitId);
            String Image = imagePath;
            String BuyPrice = getPlainNumber(txtBuyPrice.getText().trim());
            String SellPrice = getPlainNumber(txtSellPrice.getText().trim());
            String Stock = txtStock.getText().trim();

            if (Name.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Name cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (BuyPrice.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Buy Price cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (SellPrice.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Sell Price cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (Stock.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Stock cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try (PreparedStatement ps = conn.prepareStatement("UPDATE products SET name = ?, unit_id = ?, category_id = ?, stocks = ?, purchase_price = ?, sell_price = ?, image = ? WHERE barcode = ?")) {
                ps.setString(1, Name);
                ps.setString(2, Unit);
                ps.setString(3, Category);
                ps.setString(4, Stock);
                ps.setString(5, BuyPrice);
                ps.setString(6, SellPrice);
                if (selectedImageFile != null && targetImageFile != null) {
                    ps.setString(7, imagePath);  // New image path
                } else {
                    ps.setString(7, pathImage);  // Keep the original image path
                }
                ps.setString(8, Barcode);
                ps.executeUpdate();
                try {
                    if (selectedImageFile != null && targetImageFile != null) {
                        // Before copying the new image, delete the old one if it exists
                        if (pathImage != null && !pathImage.isEmpty()) {
                            File oldImageFile = new File(pathImage);
                            if (oldImageFile.exists() && !oldImageFile.getAbsolutePath().equals(targetImageFile.getAbsolutePath())) {
                                if (oldImageFile.delete()) {
                                } else {
                                }
                            }
                        }

                        // Copy the new image
                        Files.copy(selectedImageFile.toPath(), targetImageFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                    } else {
                    }
                } catch (IOException ex) {
                    System.out.println("Error occurred while handling images: " + ex.getMessage());
                }

                JOptionPane.showMessageDialog(addUserDialog, "Product added successfully!");
                addUserDialog.dispose(); // Close the dialog

                int pageNumber = 0; // Set the current page (0 for the first page)
                fetchProducts(searchQuery, pageNumber);
                updatePrevNextButtons();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(addUserDialog, "Error adding user: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Handle Cancel button
        btnCancel.addActionListener(e -> addUserDialog.dispose());

        addUserDialog.setLocationRelativeTo(this); // Center dialog
        addUserDialog.setVisible(true);
    }

    private boolean isBarcodeUnique(String Barcode) {
        String query = "SELECT COUNT(*) FROM products WHERE barcode = ?";

        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, Barcode); // Set the username parameter
            ResultSet rs = ps.executeQuery();
            if (rs.next() && rs.getInt(1) > 0) {
                return false; // Username already exists
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error checking username: " + ex.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        return true;
    }

    static class StockFilter extends DocumentFilter {

        @Override
        public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
            if (string == null) {
                return;
            }
            if (string.matches("\\d*")) { // Allow only digits
                super.insertString(fb, offset, string, attr);
            }
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
            if (text == null) {
                return;
            }
            if (text.matches("\\d*")) { // Allow only digits
                super.replace(fb, offset, length, text, attrs);
            }
        }

        @Override
        public void remove(FilterBypass fb, int offset, int length) throws BadLocationException {
            super.remove(fb, offset, length);
        }
    }

    static class CurrencyFilter extends DocumentFilter {

        private final DecimalFormat currencyFormat;

        public CurrencyFilter() {
            // Create a DecimalFormat for IDR
            currencyFormat = (DecimalFormat) NumberFormat.getCurrencyInstance(new Locale("id", "ID"));
            currencyFormat.setMaximumFractionDigits(0); // No decimal places for IDR
            currencyFormat.setGroupingUsed(true); // Use grouping separators
            currencyFormat.setPositivePrefix("Rp ");
        }

        @Override
        public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
            if (string == null) {
                return;
            }
            String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
            String newText = currentText.substring(0, offset) + string + currentText.substring(offset);
            updateText(fb, newText);
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String string, AttributeSet attrs) throws BadLocationException {
            String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
            String newText = currentText.substring(0, offset) + string + currentText.substring(offset + length);
            updateText(fb, newText);
        }

        @Override
        public void remove(FilterBypass fb, int offset, int length) throws BadLocationException {
            String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
            String newText = currentText.substring(0, offset) + currentText.substring(offset + length);
            updateText(fb, newText);
        }

        private void updateText(FilterBypass fb, String text) throws BadLocationException {
            // Remove non-digit characters
            String numericText = text.replaceAll("[^\\d]", "");
            if (numericText.isEmpty()) {
                numericText = "0";
            }
            long parsedValue = Long.parseLong(numericText);
            String formattedText = currencyFormat.format(parsedValue);
            fb.replace(0, fb.getDocument().getLength(), formattedText, null);
        }
    }

    private String getPlainNumber(String formattedPrice) {
        // Remove currency symbol and grouping separators (e.g., commas)
        String plainNumber = formattedPrice.replaceAll("[^\\d]", "");
        return plainNumber;  // Return the raw numeric value (as a String)
    }

    private String getImage(String barcode) {
        String pathImage = null;
        String sql = "SELECT image FROM products WHERE barcode = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, barcode);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    pathImage = rs.getString("image");
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error fetching image path: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return pathImage;
    }

    private void customizeTable() {
        // Set font for the table's cells
        Font tableFont = new Font("Arial", Font.PLAIN, 12);  // Change the font size as needed
        tableProducts.setFont(tableFont);  // Apply to the table cells

        // Set font for the table's header
        JTableHeader tableHeader = tableProducts.getTableHeader();
        tableHeader.setFont(new Font("Arial", Font.BOLD, 14));  // Set a bigger font for the header

        // Adjust the row height to fit the larger font size
        tableProducts.setRowHeight(30);  // Set a larger row height if needed

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

// Apply to all columns except image column (assuming it's column 3)
        for (int i = 0; i < tableProducts.getColumnCount(); i++) {
            if (i != 3) { // Skip image column
                tableProducts.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JLabel btnCategories;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JLabel btnHome;
    private javax.swing.JLabel btnLevels;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JLabel btnProducts;
    private javax.swing.JLabel btnTransactions;
    private javax.swing.JLabel btnUnits;
    private javax.swing.JLabel btnUsers;
    private javax.swing.JLabel iconCategories;
    private javax.swing.JLabel iconHome;
    private javax.swing.JLabel iconLevels;
    private javax.swing.JLabel iconProducts;
    private javax.swing.JLabel iconTransactions;
    private javax.swing.JLabel iconUnits;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelUnits;
    private javax.swing.JPanel pageButtonsPanel;
    private javax.swing.JTable tableProducts;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JLabel txtSession;
    // End of variables declaration//GEN-END:variables
}
