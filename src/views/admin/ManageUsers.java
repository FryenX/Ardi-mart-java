/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views.admin;

import Config.UserSession;
import Config.constant;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDateTime;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.util.UUID;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JPasswordField;
import org.mindrot.jbcrypt.BCrypt;
import views.Login;

/**
 *
 * @author FryenX
 */
public class ManageUsers extends javax.swing.JFrame {

    /**
     * Creates new form ManageUser
     */
    public ManageUsers() {
        initComponents();
        customizeTable();
        txtSession.setText(UserSession.getName());
        String searchQuery = txtSearch.getText().trim();
        int pageNumber = 0; // Set the current page (0 for the first page)
        fetchUsers(searchQuery, pageNumber);
        Icon();
    }
    private void Icon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/image/icon.png")));
    }
    private final Connection conn = (Connection) constant.connect();
    private int currentPage = 0;
    private int totalPages = 0;
    private final int pageSize = 10;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelUsers = new javax.swing.JLabel();
        btnAddUser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableUsers = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        pageButtonsPanel = new javax.swing.JPanel();
        btnPrev = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnTransactions = new javax.swing.JLabel();
        btnHome = new javax.swing.JLabel();
        iconHome = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnUsers = new javax.swing.JLabel();
        btnCategories = new javax.swing.JLabel();
        btnUnits = new javax.swing.JLabel();
        btnProducts = new javax.swing.JLabel();
        btnLevels = new javax.swing.JLabel();
        iconCategories = new javax.swing.JLabel();
        iconUnits = new javax.swing.JLabel();
        iconProducts = new javax.swing.JLabel();
        iconLevels = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        iconTransactions = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtSession = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelUsers.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        labelUsers.setText("Users");

        btnAddUser.setBackground(new java.awt.Color(0, 153, 255));
        btnAddUser.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnAddUser.setForeground(new java.awt.Color(255, 255, 255));
        btnAddUser.setText("Add Data");
        btnAddUser.setBorder(null);
        btnAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddUserActionPerformed(evt);
            }
        });

        tableUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "No", "Name", "Level", "id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableUsers.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(tableUsers);
        if (tableUsers.getColumnModel().getColumnCount() > 0) {
            tableUsers.getColumnModel().getColumn(0).setMinWidth(40);
            tableUsers.getColumnModel().getColumn(0).setPreferredWidth(40);
            tableUsers.getColumnModel().getColumn(0).setMaxWidth(40);
            tableUsers.getColumnModel().getColumn(3).setMinWidth(0);
            tableUsers.getColumnModel().getColumn(3).setPreferredWidth(0);
            tableUsers.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel2.setText("Search:");

        btnEdit.setBackground(new java.awt.Color(51, 204, 0));
        btnEdit.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnEdit.setText("Edit");
        btnEdit.setBorder(null);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(204, 0, 0));
        btnDelete.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setBorder(null);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnNext.setBackground(new java.awt.Color(102, 102, 102));
        btnNext.setFont(new java.awt.Font("Poppins Black", 1, 14)); // NOI18N
        btnNext.setForeground(new java.awt.Color(255, 255, 255));
        btnNext.setText(">>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        pageButtonsPanel.setAlignmentX(0.0F);
        pageButtonsPanel.setAlignmentY(0.0F);

        javax.swing.GroupLayout pageButtonsPanelLayout = new javax.swing.GroupLayout(pageButtonsPanel);
        pageButtonsPanel.setLayout(pageButtonsPanelLayout);
        pageButtonsPanelLayout.setHorizontalGroup(
            pageButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );
        pageButtonsPanelLayout.setVerticalGroup(
            pageButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );

        btnPrev.setBackground(new java.awt.Color(102, 102, 102));
        btnPrev.setFont(new java.awt.Font("Poppins Black", 1, 14)); // NOI18N
        btnPrev.setForeground(new java.awt.Color(255, 255, 255));
        btnPrev.setText("<<");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        btnTransactions.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnTransactions.setForeground(new java.awt.Color(255, 255, 255));
        btnTransactions.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnTransactions.setText("Transactions");
        btnTransactions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTransactionsMouseClicked(evt);
            }
        });

        btnHome.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnHome.setForeground(new java.awt.Color(255, 255, 255));
        btnHome.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnHome.setText("Home");
        btnHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHomeMouseClicked(evt);
            }
        });

        iconHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/chart-simple-solid.png"))); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/users-solid.png"))); // NOI18N

        btnUsers.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnUsers.setForeground(new java.awt.Color(255, 255, 255));
        btnUsers.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnUsers.setText("Users");
        btnUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUsersMouseClicked(evt);
            }
        });

        btnCategories.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnCategories.setForeground(new java.awt.Color(255, 255, 255));
        btnCategories.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCategories.setText("Categories");
        btnCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCategoriesMouseClicked(evt);
            }
        });

        btnUnits.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnUnits.setForeground(new java.awt.Color(255, 255, 255));
        btnUnits.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnUnits.setText("Units");
        btnUnits.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUnitsMouseClicked(evt);
            }
        });

        btnProducts.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnProducts.setForeground(new java.awt.Color(255, 255, 255));
        btnProducts.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnProducts.setText("Products");
        btnProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnProductsMouseClicked(evt);
            }
        });

        btnLevels.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnLevels.setForeground(new java.awt.Color(255, 255, 255));
        btnLevels.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnLevels.setText("Levels");
        btnLevels.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLevelsMouseClicked(evt);
            }
        });

        iconCategories.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/list-solid.png"))); // NOI18N

        iconUnits.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/list-solid.png"))); // NOI18N

        iconProducts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/table-solid.png"))); // NOI18N

        iconLevels.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/share-solid.png"))); // NOI18N

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        jSeparator2.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        iconTransactions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Menu/table-solid.png"))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setMinimumSize(new java.awt.Dimension(194, 100));

        txtSession.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        txtSession.setText("NAME");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(txtSession)
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSession)
                .addContainerGap())
        );

        btnLogout.setBackground(new java.awt.Color(255, 0, 0));
        btnLogout.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(255, 255, 255));
        btnLogout.setText("LOGOUT");
        btnLogout.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(iconTransactions)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnTransactions, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(iconHome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHome))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(iconCategories)
                                    .addComponent(iconUnits)
                                    .addComponent(iconLevels)
                                    .addComponent(iconProducts))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCategories)
                                    .addComponent(btnUsers)
                                    .addComponent(btnUnits)
                                    .addComponent(btnProducts)
                                    .addComponent(btnLevels)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(iconHome)
                    .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUsers)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCategories)
                    .addComponent(iconCategories))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUnits)
                    .addComponent(iconUnits))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnProducts)
                    .addComponent(iconProducts))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLevels)
                    .addComponent(iconLevels))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnTransactions)
                    .addComponent(iconTransactions))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 827, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pageButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(labelUsers))
                .addGap(0, 18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(labelUsers)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(btnPrev))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNext))))
                    .addComponent(pageButtonsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    static class ComboLevels {

        private final int level_id;
        private final String level;

        public ComboLevels(int level_id, String level) {
            this.level_id = level_id;
            this.level = level;
        }

        public int getId() {
            return level_id;
        }

        public String getName() {
            return level;
        }

        @Override
        public String toString() {
            return level; // Display the level name in the JComboBox
        }
    }

    private void btnAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUserActionPerformed
        JDialog addUserDialog = new JDialog(this, "Add New User", true);
        addUserDialog.setSize(400, 300);
        addUserDialog.setLayout(new BorderLayout());

        // Panel for input
        JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JPanel formPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5); // Small gaps around components
        gbc.fill = GridBagConstraints.HORIZONTAL; // Nested panel for the form layout

        JLabel lblName = new JLabel("Name:");
        JTextField txtName = new JTextField(20); // Set preferred width for the input field
        JLabel lblUserName = new JLabel("Username:");
        JTextField txtUserName = new JTextField(20);
        JLabel lblPassword = new JLabel("Password:");
        JPasswordField txtPassword = new JPasswordField(20); // Password field for security
        JLabel lblConfirmPassword = new JLabel("Confirm Password:");
        JPasswordField txtConfirmPassword = new JPasswordField(20);
        JLabel lblLevel = new JLabel("Level:");
        JComboBox<ComboLevels> comboLevels = new JComboBox<>();

        txtPassword.setEchoChar('*');
        txtConfirmPassword.setEchoChar('*');

        JCheckBox showPasswordCheckBox = new JCheckBox("Show Password");
        showPasswordCheckBox.setHorizontalAlignment(SwingConstants.RIGHT);

        showPasswordCheckBox.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                // Show the password as plain text
                txtPassword.setEchoChar((char) 0); // Clear the echo character
                txtConfirmPassword.setEchoChar((char) 0);
            } else {
                // Hide the password again
                txtPassword.setEchoChar('*'); // Set the echo character to '*'
                txtConfirmPassword.setEchoChar('*');
            }
        });

        try (PreparedStatement ps = conn.prepareStatement("SELECT id, info FROM levels"); ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                int level_id = rs.getInt("id");
                String level = rs.getString("info");
                comboLevels.addItem(new ComboLevels(level_id, level)); // Corrected parentheses
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error fetching levels: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }

        gbc.gridx = 0;
        gbc.gridy = 0;
        formPanel.add(lblName, gbc);
        gbc.gridx = 1;
        formPanel.add(txtName, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        formPanel.add(lblUserName, gbc);
        gbc.gridx = 1;
        formPanel.add(txtUserName, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        formPanel.add(lblLevel, gbc);
        gbc.gridx = 1;
        formPanel.add(comboLevels, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        formPanel.add(lblPassword, gbc);
        gbc.gridx = 1;
        formPanel.add(txtPassword, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        formPanel.add(lblConfirmPassword, gbc);
        gbc.gridx = 1;
        formPanel.add(txtConfirmPassword, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;

        gbc.gridx = 1;
        formPanel.add(showPasswordCheckBox, gbc);

        inputPanel.add(formPanel); // Add the form panel to the input panel

        // Panel for buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton btnSave = new JButton("Save");
        JButton btnCancel = new JButton("Cancel");
        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);

        addUserDialog.add(inputPanel, BorderLayout.CENTER);
        addUserDialog.add(buttonPanel, BorderLayout.SOUTH);

        // Handle Save button
        btnSave.addActionListener(e -> {
            ComboLevels selectedLevel = (ComboLevels) comboLevels.getSelectedItem();
            int levelId = selectedLevel.getId();
            UUID userId = UUID.randomUUID();
            String uuid = userId.toString();
            String Name = txtName.getText().trim();
            String UserName = txtUserName.getText().trim();
            String Level = String.valueOf(levelId);
            String Password = txtPassword.getText().trim();
            String ConfirmPassword = txtConfirmPassword.getText().trim();
            LocalDateTime time = LocalDateTime.now();
            String timeNow = time.toString();

            if (Name.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Name cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (UserName.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Username cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!isUsernameUnique(UserName)) {
                JOptionPane.showMessageDialog(addUserDialog, "Username is already taken. Please choose another.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (Level.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Level cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (Password.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Password cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!isPasswordValid(Password)) {
                JOptionPane.showMessageDialog(addUserDialog, "Password must be at least 6 characters long and contain at least one number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (ConfirmPassword.isEmpty()) {
                JOptionPane.showMessageDialog(addUserDialog, "Confirm Password cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!Password.equals(ConfirmPassword)) {
                JOptionPane.showMessageDialog(addUserDialog, "Passwords do not match.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String hashedPassword = BCrypt.hashpw(Password, BCrypt.gensalt());
            try (PreparedStatement ps = conn.prepareStatement("INSERT INTO users (uuid, name, level_id, username, password, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?)")) {
                ps.setString(1, uuid);
                ps.setString(2, Name);
                ps.setString(3, Level);
                ps.setString(4, UserName);
                ps.setString(5, hashedPassword);
                ps.setString(6, timeNow);
                ps.setString(7, timeNow);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(addUserDialog, "User added successfully!");
                addUserDialog.dispose(); // Close the dialog

                String searchQuery = txtSearch.getText().trim();
                int pageNumber = 0; // Set the current page (0 for the first page)
                fetchUsers(searchQuery, pageNumber);
                updatePrevNextButtons();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(addUserDialog, "Error adding user: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Handle Cancel button
        btnCancel.addActionListener(e -> addUserDialog.dispose());

        addUserDialog.setLocationRelativeTo(this); // Center dialog
        addUserDialog.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddUserActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String searchQuery = txtSearch.getText().trim();  // Get the text from the search field
        int pageNumber = 0; // Set the current page (0 for the first page)
        if (!searchQuery.isEmpty()) {
            fetchUsers(searchQuery, pageNumber);
        } else {
            fetchUsers(searchQuery, pageNumber);
        }// TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int selectedRow = tableUsers.getSelectedRow();

        if (selectedRow != -1) {
            String id = getSelectedUserId();  // Assuming this method returns the ID from the hidden column

            // Now, retrieve the current user data from the database
            String query = "SELECT name, username, level_id FROM users WHERE uuid = ?";

            try (PreparedStatement ps = conn.prepareStatement(query)) {
                ps.setString(1, id); // Set the ID parameter for the query
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        String name = rs.getString("name");
                        String username = rs.getString("username");
                        int levelId = rs.getInt("level_id");

                        // Call editUser method with the retrieved data
                        String searchQuery = txtSearch.getText().trim(); // Get the current search query
                        editUser(id, name, username, levelId, searchQuery);  // Pass all necessary data to editUser

                    } else {
                        JOptionPane.showMessageDialog(this, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error fetching user data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user first.", "No Selection", JOptionPane.WARNING_MESSAGE);
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String id = getSelectedUserId();
        if (id != null && !id.isEmpty()) {
            String searchQuery = txtSearch.getText().trim();
            deleteUser(id, searchQuery); // Pass the String ID to your delete method
        } else {
            JOptionPane.showMessageDialog(this, "No user selected or invalid ID.", "Error", JOptionPane.ERROR_MESSAGE);
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        String searchQuery = txtSearch.getText().trim();
        if (currentPage < totalPages - 1) {
            currentPage++;
            fetchUsers(searchQuery, currentPage);
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        if (currentPage > 0) {
            currentPage--;
            fetchUsers(txtSearch.getText().trim(), currentPage);
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnTransactionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTransactionsMouseClicked
        Transactions transactions = new Transactions(); // Instantiate the Input class
        transactions.setVisible(true);    // Show the Input window
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTransactionsMouseClicked

    private void btnHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomeMouseClicked
        AdminDashboard adminDashboard = new AdminDashboard(); // Instantiate the Input class
        adminDashboard.setVisible(true);    // Show the Input window
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_btnHomeMouseClicked

    private void btnUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUsersMouseClicked
        
    }//GEN-LAST:event_btnUsersMouseClicked

    private void btnCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCategoriesMouseClicked
        ManageCategories manageCategories = new ManageCategories(); // Instantiate the Input class
        manageCategories.setVisible(true);    // Show the Input window
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_btnCategoriesMouseClicked

    private void btnUnitsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUnitsMouseClicked
        ManageUnits manageUnits = new ManageUnits(); // Instantiate the Input class
        manageUnits.setVisible(true);    // Show the Input window
        this.dispose(); // TODO add your handling code here:
    }//GEN-LAST:event_btnUnitsMouseClicked

    private void btnProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnProductsMouseClicked
        ManageProducts manageProducts = new ManageProducts(); // Instantiate the Input class
        manageProducts.setVisible(true);    // Show the Input window
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_btnProductsMouseClicked

    private void btnLevelsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLevelsMouseClicked
        ManageLevels manageLevels = new ManageLevels(); // Instantiate the Input class
        manageLevels.setVisible(true);    // Show the Input window
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_btnLevelsMouseClicked

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        UserSession.clearSession();

        Login login = new Login();
        login.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void updatePrevNextButtons() {
        btnPrev.setEnabled(currentPage > 0);
        btnNext.setEnabled(currentPage < totalPages - 1);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ManageUsers().setVisible(true);
        });
    }

    private void fetchUsers(String searchQuery, int pageNumber) {
        int offset = pageNumber * pageSize; // Offset for pagination

        String sql = "SELECT uuid, name, levels.info AS level FROM users JOIN levels ON level_id = levels.id WHERE name LIKE ? OR levels.info LIKE ? LIMIT ? OFFSET ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, "%" + searchQuery + "%");
            ps.setString(2, "%" + searchQuery + "%");
            ps.setInt(3, pageSize);
            ps.setInt(4, offset);

            try (ResultSet rs = ps.executeQuery()) {
                DefaultTableModel model = (DefaultTableModel) tableUsers.getModel();
                model.setRowCount(0);  // Clear the table

                int no = offset + 1;
                while (rs.next()) {
                    model.addRow(new Object[]{
                        no++,
                        rs.getString("name"),
                        rs.getString("level"),
                        rs.getString("uuid")
                    });
                }
            }

            // Calculate total pages
            calculateTotalPages(searchQuery);
            updatePageNumbers();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading users: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void calculateTotalPages(String searchQuery) {
        String countSql = "SELECT COUNT(*) FROM users WHERE name LIKE ?";
        try (PreparedStatement ps = conn.prepareStatement(countSql)) {
            ps.setString(1, "%" + searchQuery + "%");

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int totalItems = rs.getInt(1);
                    totalPages = (int) Math.ceil((double) totalItems / pageSize);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error calculating total pages: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updatePageNumbers() {
        pageButtonsPanel.removeAll();
        int maxButtonsToShow = 2;
        int buttonsShown = 0;  // Counter for buttons displayed

        for (int i = 0; i < totalPages; i++) {
            // Show first page or within the maxButtonsToShow limit around current page
            if (i == 0 || (i >= currentPage && buttonsShown < maxButtonsToShow)) {
                JButton pageButton = new JButton(String.valueOf(i + 1));
                pageButton.setBackground(new Color(102, 102, 102));
                pageButton.setForeground(Color.WHITE);
                pageButton.setPreferredSize(new Dimension(50, 29));

                if (i == currentPage) {
                    pageButton.setEnabled(false);
                    pageButton.setBackground(new Color(128, 128, 128));
                }

                pageButton.addActionListener(e -> {
                    currentPage = Integer.parseInt(pageButton.getText()) - 1;
                    fetchUsers(txtSearch.getText().trim(), currentPage);
                    updatePageNumbers();
                });
                pageButtonsPanel.add(pageButton);

                if (i >= currentPage) {
                    buttonsShown++;
                }
            } // Add ellipsis after first page if there's a gap
            else if (i == 1 && currentPage > 1) {
                JLabel ellipsisLabel = new JLabel("...");
                ellipsisLabel.setPreferredSize(new Dimension(30, 29));
                ellipsisLabel.setHorizontalAlignment(SwingConstants.CENTER);
                pageButtonsPanel.add(ellipsisLabel);
                i = currentPage - 1; // Skip to current page
            } // Add ellipsis and last page if there are more pages
            else if (buttonsShown == maxButtonsToShow && i < totalPages - 1) {
                JLabel ellipsisLabel = new JLabel("...");
                ellipsisLabel.setPreferredSize(new Dimension(30, 29));
                ellipsisLabel.setHorizontalAlignment(SwingConstants.CENTER);
                pageButtonsPanel.add(ellipsisLabel);

                // Add last page button
                JButton lastPageButton = new JButton(String.valueOf(totalPages));
                lastPageButton.setBackground(new Color(102, 102, 102));
                lastPageButton.setForeground(Color.WHITE);
                lastPageButton.setPreferredSize(new Dimension(50, 29));
                lastPageButton.addActionListener(e -> {
                    currentPage = totalPages - 1;
                    fetchUsers(txtSearch.getText().trim(), currentPage);
                    updatePageNumbers();
                });
                pageButtonsPanel.add(lastPageButton);

                break; // Exit the loop since we've shown all needed buttons
            }
        }

        updatePrevNextButtons();

        pageButtonsPanel.setLayout(new FlowLayout());
        pageButtonsPanel.revalidate();
        pageButtonsPanel.repaint();
    }

    private String getSelectedUserId() {
        int selectedRow = tableUsers.getSelectedRow();

        // Check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user first.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return null; // No row selected
        }

        // Get the table model
        DefaultTableModel model = (DefaultTableModel) tableUsers.getModel();

        // Ensure there are enough columns (you expect at least 4 columns: No, Name, Username, ID)
        if (model.getColumnCount() > 3) {
            // Access the ID column (index 3) assuming the ID is in the fourth column
            Object userIdObject = model.getValueAt(selectedRow, 3);

            // Check if the value is a String
            if (userIdObject instanceof String) {
                return (String) userIdObject; // Return the ID as String
            } else {
                JOptionPane.showMessageDialog(this, "Invalid user ID format. Expected String.", "Error", JOptionPane.ERROR_MESSAGE);
                return null; // Invalid format, return null
            }
        } else {
            // Show a message if the column count is not sufficient
            System.out.println("Table doesn't have enough columns for ID.");
            JOptionPane.showMessageDialog(this, "Table doesn't have enough columns for ID.", "Error", JOptionPane.ERROR_MESSAGE);
            return null; // Invalid, as there are not enough columns
        }
    }

    private void deleteUser(String id, String searchQuery) {
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this user?", "Confirm Delete", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            try (PreparedStatement ps = conn.prepareStatement("DELETE FROM users WHERE uuid = ?")) {
                ps.setString(1, id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(this, "User deleted successfully!");
                int pageNumber = 0; // Set the current page (0 for the first page)
                fetchUsers(searchQuery, pageNumber);
                updatePrevNextButtons();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting users: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void editUser(String id, String name, String username, int levelId, String searchQuery) {
        // Create a JDialog for the edit form
        JDialog editUserDialog = new JDialog(this, "Edit User", true);
        editUserDialog.setSize(400, 280);
        editUserDialog.setLayout(new BorderLayout());

        // Panel for input
        JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JPanel formPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5); // Small gaps around components
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Create the form components
        JLabel lblName = new JLabel("Name:");
        JTextField txtName = new JTextField(name); // Pre-populate with existing user name
        JLabel lblUserName = new JLabel("Username:");
        JTextField txtUserName = new JTextField(username); // Set empty initially
        JLabel lblPassword = new JLabel("Password:");
        JPasswordField txtPassword = new JPasswordField(20); // Password field
        JLabel lblLevel = new JLabel("Level:");
        JComboBox<ComboLevels> comboLevels = new JComboBox<>();

        // Set the echo character for the password fields
        txtPassword.setEchoChar('*');

        JCheckBox showPasswordCheckBox = new JCheckBox("Show Password");
        showPasswordCheckBox.setHorizontalAlignment(SwingConstants.RIGHT);

        // Handle password visibility toggle
        showPasswordCheckBox.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                txtPassword.setEchoChar((char) 0);
            } else {
                txtPassword.setEchoChar('*');
            }
        });

        // Populate the ComboBox with levels
        try (PreparedStatement ps = conn.prepareStatement("SELECT id, info FROM levels"); ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                int level_id = rs.getInt("id");
                String level = rs.getString("info");
                comboLevels.addItem(new ComboLevels(level_id, level));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error fetching levels: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }

        int selectedLevelId = levelId; // The level_id retrieved from the user data (e.g., when editing)

        // Loop through the combo box items and select the one that matches the user's level_id
        for (int i = 0; i < comboLevels.getItemCount(); i++) {
            ComboLevels levelItem = comboLevels.getItemAt(i);
            if (levelItem.getId() == selectedLevelId) {
                comboLevels.setSelectedItem(levelItem); // Pre-select the level that matches the user's level_id
                break;
            }
        }

        // Layout the form components using GridBagLayout
        gbc.gridx = 0;
        gbc.gridy = 0;
        formPanel.add(lblName, gbc);
        gbc.gridx = 1;
        formPanel.add(txtName, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        formPanel.add(lblUserName, gbc);
        gbc.gridx = 1;
        formPanel.add(txtUserName, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        formPanel.add(lblLevel, gbc);
        gbc.gridx = 1;
        formPanel.add(comboLevels, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        formPanel.add(lblPassword, gbc);
        gbc.gridx = 1;
        formPanel.add(txtPassword, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.gridx = 1;
        formPanel.add(showPasswordCheckBox, gbc);

        inputPanel.add(formPanel);

        // Panel for buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton btnSave = new JButton("Save");
        JButton btnCancel = new JButton("Cancel");

// Set the "Save" button to green with white text
        btnSave.setBackground(Color.GREEN);
        btnSave.setForeground(Color.WHITE);

// Set the "Cancel" button to red with white text
        btnCancel.setBackground(Color.RED);
        btnCancel.setForeground(Color.WHITE);
        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);

        editUserDialog.add(inputPanel, BorderLayout.CENTER);
        editUserDialog.add(buttonPanel, BorderLayout.SOUTH);

        // Handle Save button
        btnSave.addActionListener(e -> {
            ComboLevels selectedLevel = (ComboLevels) comboLevels.getSelectedItem();
            int newlevelId = selectedLevel.getId();
            String Name = txtName.getText().trim();
            String UserName = txtUserName.getText().trim();
            String Level = String.valueOf(newlevelId);
            String Password = txtPassword.getText().trim();
            LocalDateTime time = LocalDateTime.now();
            String timeNow = time.toString();

            if (Name.isEmpty()) {
                JOptionPane.showMessageDialog(editUserDialog, "Name cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (UserName.isEmpty()) {
                JOptionPane.showMessageDialog(editUserDialog, "Username cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String currentUsername = getCurrentUsername(id); // Implement this method to retrieve the current username

            // Only check for uniqueness if the username has been changed
            if (!UserName.equals(currentUsername) && !isUsernameUnique(UserName)) {
                JOptionPane.showMessageDialog(editUserDialog, "Username is already taken. Please choose another.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (Level.isEmpty()) {
                JOptionPane.showMessageDialog(editUserDialog, "Level cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (Password.isEmpty()) {
                JOptionPane.showMessageDialog(editUserDialog, "Password cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!isPasswordValid(Password)) {
                JOptionPane.showMessageDialog(editUserDialog, "Password must be at least 6 characters long and contain at least one number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String storedPasswordHash = null;
            try (PreparedStatement ps = conn.prepareStatement("SELECT password FROM users WHERE uuid = ?")) {
                ps.setString(1, id);
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        storedPasswordHash = rs.getString("password");
                    }
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(editUserDialog, "Error fetching user password: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Check if the entered password matches the stored hashed password
            if (storedPasswordHash != null && !BCrypt.checkpw(Password, storedPasswordHash)) {
                JOptionPane.showMessageDialog(editUserDialog, "Incorrect password. Please enter the correct password to edit.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Hash the password before saving (if the user wants to change it)
            String hashedPassword = BCrypt.hashpw(Password, BCrypt.gensalt());

            try (PreparedStatement ps = conn.prepareStatement("UPDATE users SET name = ?, level_id = ?, username = ?, password = ?, updated_at = ? WHERE uuid = ?")) {
                ps.setString(1, Name);
                ps.setString(2, Level);
                ps.setString(3, UserName);
                ps.setString(4, hashedPassword);
                ps.setString(5, timeNow);
                ps.setString(6, id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(editUserDialog, "User updated successfully!");
                editUserDialog.dispose(); // Close the dialog

                // Refresh the table or data
                fetchUsers(searchQuery, 0); // Assuming searchQuery is already defined
                updatePrevNextButtons(); // Assuming you need to update pagination
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(editUserDialog, "Error updating user: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Handle Cancel button
        btnCancel.addActionListener(e -> editUserDialog.dispose());

        editUserDialog.setLocationRelativeTo(this); // Center dialog
        editUserDialog.setVisible(true);
    }

    private boolean isUsernameUnique(String UserName) {
        String query = "SELECT COUNT(*) FROM users WHERE username = ?";

        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, UserName); // Set the username parameter
            ResultSet rs = ps.executeQuery();
            if (rs.next() && rs.getInt(1) > 0) {
                return false; // Username already exists
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error checking username: " + ex.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        return true; // Username is unique
    }

    private boolean isPasswordValid(String Password) {
        // Check if password is at least 6 characters long
        if (Password.length() < 6) {
            return false;
        }
        if (!Password.matches(".*\\d.*")) {
            return false;
        }

        return true; // Password meets all criteria
    }

    private String getCurrentUsername(String id) {
        String currentUsername = null;
        String query = "SELECT username FROM users WHERE uuid = ?"; // Query to get the current username

        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, id); // Set the user ID as the parameter
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    currentUsername = rs.getString("username"); // Retrieve the username from the result set
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error retrieving current username: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        return currentUsername; // Return the username or null if not found
    }

    private void customizeTable() {
        // Set font for the table's cells
        Font tableFont = new Font("Arial", Font.PLAIN, 16);  // Change the font size as needed
        tableUsers.setFont(tableFont);  // Apply to the table cells

        // Set font for the table's header
        JTableHeader tableHeader = tableUsers.getTableHeader();
        tableHeader.setFont(new Font("Arial", Font.BOLD, 18));  // Set a bigger font for the header

        // Adjust the row height to fit the larger font size
        tableUsers.setRowHeight(30);  // Set a larger row height if needed
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddUser;
    private javax.swing.JLabel btnCategories;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JLabel btnHome;
    private javax.swing.JLabel btnLevels;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JLabel btnProducts;
    private javax.swing.JLabel btnTransactions;
    private javax.swing.JLabel btnUnits;
    private javax.swing.JLabel btnUsers;
    private javax.swing.JLabel iconCategories;
    private javax.swing.JLabel iconHome;
    private javax.swing.JLabel iconLevels;
    private javax.swing.JLabel iconProducts;
    private javax.swing.JLabel iconTransactions;
    private javax.swing.JLabel iconUnits;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelUsers;
    private javax.swing.JPanel pageButtonsPanel;
    private javax.swing.JTable tableUsers;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JLabel txtSession;
    // End of variables declaration//GEN-END:variables
}
